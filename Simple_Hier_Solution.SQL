DROP TABLE SOURCE_DATA;
CREATE COLUMN TABLE SOURCE_DATA
(
	START_DATE INTEGER,
	END_DATE INTEGER
);

DROP TABLE NULL_START;
CREATE COLUMN TABLE NULL_START
(
	PARENT_ID NVARCHAR(10),
	PARENT_START INTEGER,
	PARENT_END INTEGER,
	NODE_ID NVARCHAR(10),
	CHILD_START INTEGER,
	CHILD_END INTEGER
);

SELECT START_DATE, END_DATE
FROM
(	
	SELECT 2 AS START_DATE, 4 AS END_DATE FROM DUMMY UNION ALL
	SELECT 3 AS START_DATE, 7 AS END_DATE FROM DUMMY UNION ALL
	SELECT 4 AS START_DATE, 8 AS END_DATE FROM DUMMY UNION ALL
	SELECT 11 AS START_DATE, 12 AS END_DATE FROM DUMMY UNION ALL
	SELECT 15 AS START_DATE, 19 AS END_DATE FROM DUMMY UNION ALL
	SELECT 18 AS START_DATE, 22 AS END_DATE FROM DUMMY UNION ALL
	SELECT 21 AS START_DATE, 24 AS END_DATE FROM DUMMY
)
INTO SOURCE_DATA;

SELECT NULL, NULL, NULL, '0-100', 0, 100 FROM DUMMY INTO NULL_START;
-- join 0, 100 to the root nodes



DO
BEGIN	
	
	/* duplicate this source out multiple times */		
	roots = 
		SELECT DISTINCT
			CHILD.START_DATE AS ROOT_START,
			CHILD.END_DATE AS ROOT_END
		FROM
			SOURCE_DATA CHILD
		LEFT OUTER JOIN
			SOURCE_DATA PARENT ON
				PARENT.END_DATE BETWEEN CHILD.START_DATE AND CHILD.END_DATE AND
				PARENT.END_DATE < CHILD.END_DATE
		WHERE
			PARENT.START_DATE IS NULL;
			
	leaves =
		SELECT DISTINCT
			PARENT.START_DATE AS LEAF_START,
			PARENT.END_DATE AS LEAF_END,
			PARENT.START_DATE || '-' || PARENT.END_DATE AS LEAF_ID
		FROM
			SOURCE_DATA PARENT
		LEFT OUTER JOIN
			SOURCE_DATA CHILD ON
				CHILD.START_DATE BETWEEN PARENT.START_DATE AND PARENT.END_DATE AND
				PARENT.END_DATE < CHILD.END_DATE
		WHERE
			CHILD.START_DATE IS NULL;
			
	source =
		SELECT 
			PARENT_START,
			PARENT_END,
			CHILD_START,
			CHILD_END
		FROM
			NULL_START
			
		UNION ALL
				
		SELECT 
			0 AS PARENT_START,
			100 AS PARENT_END,
			ROOT_START AS CHILD_START,
			ROOT_END AS CHILD_END
		FROM
			:roots
			
		UNION ALL
		
		SELECT
			PARENT.START_DATE AS PARENT_START,
			PARENT.END_DATE AS PARENT_END,
			CHILD.START_DATE AS CHILD_START,
			CHILD.END_DATE AS CHILD_END
		FROM
			SOURCE_DATA PARENT
		INNER JOIN
			SOURCE_DATA CHILD ON
				CHILD.START_DATE BETWEEN PARENT.START_DATE AND PARENT.END_DATE AND
				CHILD.END_DATE > PARENT.END_DATE AND
				NOT 
				(
					PARENT.START_DATE = CHILD.START_DATE AND
					PARENT.END_DATE = CHILD.END_DATE
				);

	hier =
		SELECT 
			*
		FROM 
			HIERARCHY_SPANTREE
			(
				SOURCE
				(
					SELECT 
						PARENT_START || '-' || PARENT_END AS PARENT_ID,
						CHILD_START || '-' || CHILD_END AS NODE_ID,
						PARENT_START,
						PARENT_END,
						CHILD_START,
						CHILD_END
					FROM
						:source
					ORDER BY
						PARENT_START || '-' || PARENT_END,
						CHILD_START || '-' || CHILD_END
				)
			);
			
				
	working_set =
		SELECT
			*
		FROM
			HIERARCHY_ANCESTORS
			(
				SOURCE :hier
				START 
				(
					SELECT 
						node_id AS start_id, hierarchy_rank AS start_rank 
					FROM 
						:hier
				)
			)
		WHERE
			START_ID IN (SELECT LEAF_ID FROM :leaves) AND
			HIERARCHY_LEVEL > 1;
	
	windows =
		SELECT 
			1 AS DUMMY,
			START_ID AS NODE_ID,
			STRING_AGG(NODE_ID, '/' ORDER BY HIERARCHY_RANK) AS path,
			MIN(CHILD_START) AS BLOCK_START,
			MAX(CHILD_END) AS BLOCK_END
		FROM
			:working_set
		GROUP BY
			START_ID;
			
	SELECT
		BLOCK_START,
		BLOCK_END,
		NODE_ID,
		COALESCE(LAG(BLOCK_END) OVER (PARTITION BY DUMMY ORDER BY BLOCK_START) + 1, 1) AS WINDOW_START,
		COALESCE(BLOCK_START - 1, 100) AS WINDOW_END
	FROM
		:windows;		
 
END
